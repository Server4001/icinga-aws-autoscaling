#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');
let minimist, lambdaLocal;

try {
    minimist = require('minimist');
    lambdaLocal = require('lambda-local');
} catch(e) {
    console.error(e.message);
    console.error('This executable should only be used when dev dependencies have been installed.');
    process.exit(1);
}

/**
 * @var {Object} argv
 * @property {*} h
 */
let argv = minimist(process.argv.slice(2));
let create = true;

if (argv.h !== undefined || argv.help !== undefined) {
    return fs.createReadStream(path.join(__dirname, '../', 'usage_test_events.txt'))
        .pipe(process.stdout)
        .on('close', function () { process.exit(1) });
}
if (argv.v !== undefined || argv.version !== undefined) {
    return console.log(require('../package.json').version);
}
if (argv._.length < 2) {
    console.error('Must pass in instanceId and availability zone as arguments, in that order.');
    process.exit(1);
}
if (argv.d !== undefined || argv.delete !== undefined) {
    create = false;
}

const [instanceId, availabilityZone] = argv._;
const region = availabilityZone.slice(0, -1);
const timeout = argv.t || argv.timeout || 3000;
let fixtureFile = 'terminateEvent';

if (create) {
    fixtureFile = 'launchEvent';
}

const eventPayload = require(path.join(__dirname, '../', `tests/fixtures/${fixtureFile}`))(instanceId, availabilityZone);

lambdaLocal.execute({
    region,
    event: eventPayload,
    lambdaHandler: 'handler',
    lambdaPath: path.join(__dirname, '../', 'index.js'),
    timeoutMs: timeout
});
